% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/best_proj_pipeline.R
\name{best_proj_pipeline}
\alias{best_proj_pipeline}
\title{Identify possible transformation pipelines}
\usage{
best_proj_pipeline(
  object,
  source_crs,
  target_crs,
  require_inverse = FALSE,
  allow_ballpark = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{object}{an sf object}

\item{source_crs}{source CRS}

\item{target_crs}{target CRS}

\item{require_inverse}{require that all transformations are invertible? Default: \code{TRUE}}

\item{allow_ballpark}{allow for "ballpark" transformations? Passed to PROJ}

\item{verbose}{print messages to standard output? Default \code{TRUE}}
}
\value{
invisible character string containing proj pipeline; if \code{verbose} an explanation is printed to console
}
\description{
Identify possible transformation pipelines
}
\examples{

library(sf)

# get first muname starts with musick
qry <- "SELECT TOP 1 mukey FROM mapunit WHERE muname LIKE 'Musick\%'"
x <- sf::st_as_sf(soilDB::fetchSDA_spatial(soilDB::SDA_query(qry)$mukey,
                                           add.fields = 'mapunit.muname'))

# single delineation
object <- x[1,]

best_proj_pipeline(object, "OGC:CRS83", "OGC:CRS27")

best_proj_pipeline(object, "OGC:CRS83", "EPSG:4267")

best_proj_pipeline(object, "EPSG:4326", "EPSG:4267")

}
